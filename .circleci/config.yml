# Scala CircleCI 2.0 configuration file
# See: https://circleci.com/docs/2.0/sample-config/
version: 2

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.sbt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: cat /dev/null | sbt test:compile

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies--{{ checksum "build.sbt" }}

      # run tests!
      - run: cat /dev/null | sbt test:test
  
  test:
    docker: 
      - image: circleci/openjdk:8-jdk
      - image: postgres:13
        environment:
          POSTGRES_PASSWORD: 'gcs'
          POSTGRES_USER: 'gcs'
          POSTGRES_DB: 'gcs'

    working_directory: ~/repo

    environment: 
      JVM_OPTS: -Xmx3200m
      TERM: dumb
      LC_CALL: en_US.UTF-8
    steps: 
      - checkout
      - run: cat /dev/null | sbt "project gcsAppIT" test
      - store_artifacts:
          path: expected.png
      - store_artifacts:
          path: result.png
  package-deploy:
    docker:
      - image: circleci/openjdk:8-jdk

    working_directory: ~/repo

    environment: 
      JVM_OPTS: -Xmx3200m
      TERM: dumb
      LC_CALL: en_US.UTF-8

    steps:
      - checkout 
      - run:  sudo apt update
      - run:  sudo apt install software-properties-common
      - run:  sudo apt-get install rpm
      - run:  sbt rpm:packageBin  
      - add_ssh_keys:
          fingerprints: 
            - "ed:fc:f4:79:55:76:1d:d4:d4:71:4b:06:49:90:38:c8"
      - run: 
          name: Deploying and installing to Azure
          command: |
              ssh-keyscan -H 52.168.126.65 >> ~/.ssh/known_hosts
              scp /home/circleci/repo/gcs-app/target/rpm/RPMS/noarch/gcs-app-2.8.x-1.noarch.rpm azureuser@52.168.126.65:/home/azureuser  
      - run: ssh azureuser@52.168.126.65 "sudo systemctl stop gcs-app"             
      - run: ssh azureuser@52.168.126.65 "sudo rpm -e gcs-app || true"
      - run: ssh azureuser@52.168.126.65 "sudo rpm -i gcs-app-2.8.x-1.noarch.rpm"
      - run: ssh azureuser@52.168.126.65 "sudo sed -i 's/localhost/10.0.0.5/g' /etc/gcs-app/application.conf"
      - run: ssh azureuser@52.168.126.65 "sudo chown -R gcs-app /usr/share/gcs-app/"
      - run: ssh azureuser@52.168.126.65 "sudo chgrp -R gcs-app /usr/share/gcs-app/"
      - run: ssh azureuser@52.168.126.65 "sudo systemctl start gcs-app"
      - run: ssh azureuser@52.168.126.65 "sudo rm /usr/share/gcs-app/RUNNING_PID"
      - run: ssh azureuser@52.168.126.65 "sudo systemctl restart gcs-app"
          
workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - package-deploy:
          requires:
            - test